{-# LANGUAGE OverlappingInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

module Split where

import Data.Kind
import Data.Proxy

import qualified Data.Vector as V
-- import qualified Data.Vector.Generic as G
-- import qualified Data.Vector.Storable as S
import qualified Data.Vector.Unboxed as U



--------------------------------------------------------------------------------



newtype Vector rep a = Vector { getVector :: rep a }
    deriving (Eq, Ord, Read, Show)



instance Foldable (Vector V.Vector) where
    foldMap f = foldMap f . getVector

instance Functor (Vector V.Vector) where
    fmap f = Vector . fmap f . getVector



class Foldable0 fa where
    type Cont fa :: Type -> Type
    type Elem fa :: Type
    foldMap0 :: Monoid m => (Elem fa -> m) -> fa -> m

instance Foldable f => Foldable0 (f a) where
    type Cont (f a) = f
    type Elem (f a) = a
    foldMap0 = foldMap

instance U.Unbox a => Foldable0 (U.Vector a) where
    type Cont (U.Vector a) = U.Vector
    type Elem (U.Vector a) = a
    foldMap0 f = U.foldl' (\r -> mappend r . f) mempty
